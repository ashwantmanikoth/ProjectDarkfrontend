generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  blocked        Boolean        @default(false)
  role           String         @default("user")
  membership     MembershipType @default(FREE)
  subscriptionId String?
  lastLoginAt    DateTime?
  accounts       Account[]
  sessions       Session[]
  subscription   Subscription?
  documents      Document[]
  groups         Group[]

  @@index([email])
  @@index([role])
  @@index([membership])
}

model Subscription {
  id         String         @id @default(cuid())
  userId     String         @unique
  membership MembershipType
  status     String         @default("active")
  price      Int
  createdAt  DateTime       @default(now())
  expiresAt  DateTime
  canceledAt DateTime?
  user       User           @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([expiresAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  lastActive   DateTime  @default(now())
  userAgent    String?
  ipAddress    String?
  revoked      Boolean   @default(false)
  revokedAt    DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@index([revoked])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

model Document {
  id          String   @id @default(cuid())
  title       String
  fileName    String
  filePath    String?
  fileSize    Int      // in bytes
  pageCount   Int?
  status      String   @default("processing")
  summary     String?
  userId      String
  groupId     String?
  uploadedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([groupId])
}

model Group {
  id          String     @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents   Document[]

  @@index([userId])
  @@index([createdAt])
}

enum MembershipType {
  FREE
  PRO
  ULTRA
}
